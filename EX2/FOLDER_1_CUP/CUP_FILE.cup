/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import java.io.PrintWriter;
import AST.*;

parser code 
{:
	public Lexer lexer;
	public PrintWriter writer;
	public String output;

	public Parser(Lexer lexer, String outputFilename)
	{
		super(lexer);
		this.lexer = lexer;
		this.output = outputFilename;
		
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		

		try
		{
			this.writer = new PrintWriter(this.output);
			this.writer.print("ERROR(" + lexer.getLine() + ")");
			this.writer.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}

		System.exit(0);

	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal LT;
terminal CLASS;
terminal ERROR;
terminal NIL;
terminal COMMA;
terminal ELLIPSIS;
terminal GT;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal NEW;

/************************/
/* ADDITIONAL TERMINALS */
/************************/
terminal Integer INT;
terminal String  ID;
terminal String  STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM   Program;
non terminal AST_DEC       dec;
non terminal AST_DEC_LIST  decList;
non terminal AST_VAR_DEC   varDec;

non terminal AST_FUNCDEC   funcDec;
non terminal AST_CLASSDEC  classDec;
non terminal AST_ARR_DEC   arrayDec;

non terminal AST_EXP 	   exp;
non terminal AST_VAR 	   var;
non terminal AST_STMT      stmt;
non terminal AST_STMT_LIST stmtList;

non terminal AST_NEW_EXP   newExp;
non terminal AST_CFIELD    cField;

non terminal AST_BINOP     binOp;
non terminal AST_INT       int;

//assisting non terminals:
non terminal AST_FULLINT     fullInt;
non terminal AST_IDSCOMMA    commaIdsLst;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_COMMAEXP    commaExpsLst;
non terminal AST_BRACESEXP   bracesExps;
non terminal AST_FUNC_CALL   funcCall;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program		::=		decList:l								{: RESULT = new AST_PROGRAM(l);      :}
					;
				

decList	    ::=		dec:d	decList:l						{: RESULT = new AST_DEC_LIST(d,l);    :}
					| dec:d				    				{: RESULT = new AST_DEC_LIST(d,null); :}
					;

commaIdsLst ::=     COMMA ID: t ID: n commaIdsLst: idl	    {: RESULT = new AST_IDSCOMMA(t, n, idl); :}
					|                  				        {: RESULT = null;                        :}
					;

commaExpsLst ::=    COMMA exp: e commaExpsLst: cel		    {: RESULT = new AST_COMMAEXP(e, cel);  :}
					|                  				        {: RESULT = null;                        :}
					;

bracesExps  ::=     LPAREN RPAREN									{: RESULT = null;					   :}
					| LPAREN exp: e commaExpsLst: cel RPAREN		{: RESULT = new AST_BRACESEXP(e, cel); :}
					;

funcCall    ::=     ID:n bracesExps: brExp					{: RESULT = new AST_FUNC_CALL(n, brExp, null); :}
					| var: v DOT ID:n bracesExps: brExp		{: RESULT = new AST_FUNC_CALL(n, brExp, v);    :}
					;

cFieldList	::=		cField: cf	cFieldList: cfl				{: RESULT = new AST_CFIELD_LIST(cf, cfl);	  :}
					| cField: cf							{: RESULT = new AST_CFIELD_LIST(cf);		  :}
					;
				
dec			::= 	varDec: vd     							{: RESULT = new AST_DEC((AST_VAR_DEC)vd);				:}
				    | funcDec: fd							{: RESULT = new AST_DEC((AST_FUNCDEC)fd);				:}
				    | classDec: cd							{: RESULT = new AST_DEC((AST_CLASSDEC)cd);				:}
				    | arrayDec: ad							{: RESULT = new AST_DEC((AST_ARR_DEC)ad);				:}
				    ;

varDec		::=	    ID:t ID:n ASSIGN exp:e SEMICOLON		    {: RESULT = new AST_VAR_DEC_EXP(t, n, e);		:} 
				    | ID:t ID:n SEMICOLON		                {: RESULT = new AST_VAR_DEC_EXP(t, n, null);	:} 
				    | ID:t ID:n ASSIGN newExp:ne SEMICOLON		{: RESULT = new AST_VAR_DEC_NEW_EXP(t, n, ne);	:} 
				    ;

funcDec     ::=     ID: t ID: n LPAREN RPAREN LBRACE stmtList: sl RBRACE   								            {: RESULT = new AST_FUNCDEC(t, n, sl); 					:}
				    | ID: t ID: n LPAREN ID: argT ID: argN commaIdsLst: idl RPAREN LBRACE stmtList: sl RBRACE		{: RESULT = new AST_FUNCDEC(t, n, argT, argN, idl, sl); :}
				    ;

classDec    ::=     CLASS ID: clsN LBRACE cFieldList: cfl RBRACE                    	{: RESULT = new AST_CLASSDEC(clsN, null, cfl); :}
			       	| CLASS ID: clsN EXTENDS ID: extN LBRACE cFieldList: cfl RBRACE     {: RESULT = new AST_CLASSDEC(clsN, extN, cfl); :}
				    ;

arrayDec    ::=     ARRAY ID:n EQ ID:t LBRACK RBRACK       			    {: RESULT = new AST_ARR_DEC(t,n);     :}
				    ;
				
stmtList	::=		stmt:s	stmtList:l									{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s											{: RESULT = new AST_STMT_LIST(s,null); :}
					;

fullInt	    ::=     int: i												{: RESULT = new AST_FULLINT(i, false); :}
					| MINUS int: i          							{: RESULT = new AST_FULLINT(i, true);  :}
					;
 

var			::=		ID:name														{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName									{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK									{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		varDec:vd													{: RESULT = new AST_STMT_VAR_DEC(vd);		:}
					| var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v, e);		:}
					| var:v ASSIGN newExp:ne SEMICOLON							{: RESULT = new AST_STMT_NEW_ASSIGN(v, ne);	:}
					| RETURN exp:e SEMICOLON                                    {: RESULT = new AST_STMT_RETURN(e);		:}
					| RETURN SEMICOLON                                          {: RESULT = new AST_STMT_RETURN(null);		:}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond, body);	:}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond, body);	:}
					| funcCall: f SEMICOLON						                {: RESULT = new AST_STMT_FUNCCALL(f);		:}
					;

exp			::=		  var:v								{: RESULT = new AST_EXP_VAR(v);					:}
					| LPAREN exp: e RPAREN				{: RESULT = new AST_EXP_EXP(e);					:}
					| exp: e1 binOp: b  exp:e2			{: RESULT = new AST_EXP_BINOP(e1, e2, b);		:}
					| funcCall: f						{: RESULT = new AST_EXP_FUNCCALL(f);			:}
					| fullInt: i						{: RESULT = new AST_EXP_INT(i);					:}
					| NIL								{: RESULT = new AST_EXP_NIL();					:}
					| STRING: s							{: RESULT = new AST_EXP_STRING(s);				:}
					;
					
newExp		::=		NEW ID:t							{: RESULT = new AST_NEW_EXP(t);					:}
					| NEW ID:t LBRACK exp:e RBRACK		{: RESULT = new AST_NEW_EXP_EXTENDED(t, e);		:}
					;

cField      ::=     varDec: vd							{: RESULT = new AST_CFIELD(vd);				 	:}
                    | funcDec: fd						{: RESULT = new AST_CFIELD(fd);					:}
					;

binOp       ::=     PLUS                                {: RESULT = new AST_BINOP(AST_BINOP.Op.PLUS);	:}
					| MINUS                             {: RESULT = new AST_BINOP(AST_BINOP.Op.MINUS);	:}								
					| TIMES                             {: RESULT = new AST_BINOP(AST_BINOP.Op.TIMES);	:}
					| DIVIDE                            {: RESULT = new AST_BINOP(AST_BINOP.Op.DIVIDE);	:}
					| GT                                {: RESULT = new AST_BINOP(AST_BINOP.Op.GT);		:}
					| LT                                {: RESULT = new AST_BINOP(AST_BINOP.Op.LT);		:}
					| EQ                                {: RESULT = new AST_BINOP(AST_BINOP.Op.EQ);		:}
					;

int         ::=     INT: i								{: RESULT = new AST_INT(i);						:}
					;

/********************/
/* END OF SECTION   */
/********************/